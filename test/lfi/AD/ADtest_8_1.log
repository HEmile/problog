[LVL9] Output level: 9
[INFO] Number of examples: 4
[DEBUG] 
[DEBUG] Processed Atoms:
[DEBUG] 	lfi_prob(0,t)::lfi_fact(0,X); lfi_prob(1,t)::lfi_fact(1,Y); lfi_prob(2,t)::lfi_fact(2,Z) :- lfi_rule(0_1_2,X,Y,Z)
[DEBUG] 	lfi_rule(0_1_2,X,Y,Z) :- X=Y, Y=Z
[DEBUG] 	a(X) :- lfi_body(0,X)
[DEBUG] 	lfi_body(0,X) :- lfi_par(0,X), lfi_fact(0,X)
[DEBUG] 	lfi_par(0,X) :- lfi_rule(0_1_2,X,Y,Z)
[DEBUG] 	b(Y) :- lfi_body(1,Y)
[DEBUG] 	lfi_body(1,Y) :- lfi_par(1,Y), lfi_fact(1,Y)
[DEBUG] 	lfi_par(1,Y) :- lfi_rule(0_1_2,X,Y,Z)
[DEBUG] 	c(Z) :- lfi_body(2,Z)
[DEBUG] 	lfi_body(2,Z) :- lfi_par(2,Z), lfi_fact(2,Z)
[DEBUG] 	lfi_par(2,Z) :- lfi_rule(0_1_2,X,Y,Z)
[DEBUG] 
[DEBUG] Base Program:
[DEBUG] 	body_2(0,multi,V_0,V_1,V_2) :- lfi_rule(0_1_2,V_0,V_1,V_2).
[DEBUG] 	lfi_rule(0_1_2,V_0,V_1,V_2) :- V_0=V_1, V_1=V_2.
[DEBUG] 	a(V_0) :- lfi_body(0,V_0).
[DEBUG] 	lfi_body(0,V_0) :- lfi_par(0,V_0), lfi_fact(0,V_0).
[DEBUG] 	lfi_par(0,V_0) :- lfi_rule(0_1_2,V_0,V_1,V_2).
[DEBUG] 	b(V_0) :- lfi_body(1,V_0).
[DEBUG] 	lfi_body(1,V_0) :- lfi_par(1,V_0), lfi_fact(1,V_0).
[DEBUG] 	lfi_par(1,V_0) :- lfi_rule(0_1_2,V_1,V_0,V_2).
[DEBUG] 	c(V_0) :- lfi_body(2,V_0).
[DEBUG] 	lfi_body(2,V_0) :- lfi_par(2,V_0), lfi_fact(2,V_0).
[DEBUG] 	lfi_par(2,V_0) :- lfi_rule(0_1_2,V_1,V_2,V_0).
[DEBUG] 	lfi_prob(0,t)::lfi_fact(0,V_0); lfi_prob(1,t)::lfi_fact(1,V_1); lfi_prob(2,t)::lfi_fact(2,V_2) :- body_2(0,multi,V_0,V_1,V_2).
[DEBUG] 	
[DEBUG] AD Groups		:[(a(X), b(Y), c(Z))]
[DEBUG] 
[DEBUG] Compiling example 1/4
[DEBUG] 	Grounded Atoms:	(c(3), b(2), a(1))
[DEBUG] 	Evidence:	[(c(3), True), (b(2), True), (a(1), True)]
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		Evidence : 
[DEBUG] 		* c(3) : 1
[DEBUG] 		* b(2) : 2
[DEBUG] 		* a(1) : 3
[DEBUG] 		
[DEBUG] 	Node 1:	Adding query for fact:	lfi_fact(2,3)
[DEBUG] 	Node 1:	Adding query for body:	lfi_body(2,3)	
[DEBUG] 	Node 1:	Adding query for par :	lfi_par(2,3)	
[DEBUG] 	Node 2:	Adding query for fact:	lfi_fact(1,2)
[DEBUG] 	Node 2:	Adding query for body:	lfi_body(1,2)	
[DEBUG] 	Node 2:	Adding query for par :	lfi_par(1,2)	
[DEBUG] 	Node 3:	Adding query for fact:	lfi_fact(0,1)
[DEBUG] 	Node 3:	Adding query for body:	lfi_body(0,1)	
[DEBUG] 	Node 3:	Adding query for par :	lfi_par(0,1)	
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(2,3) : 1 [query]
[DEBUG] 		* lfi_fact(1,2) : 2 [query]
[DEBUG] 		* lfi_fact(0,1) : 3 [query]
[DEBUG] 		* lfi_body(2,3) : 0 [query]
[DEBUG] 		* lfi_par(2,3) : 0 [query]
[DEBUG] 		* lfi_body(1,2) : 0 [query]
[DEBUG] 		* lfi_par(1,2) : 0 [query]
[DEBUG] 		* lfi_body(0,1) : 0 [query]
[DEBUG] 		* lfi_par(0,1) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* c(3) : 1
[DEBUG] 		* b(2) : 2
[DEBUG] 		* a(1) : 3
[DEBUG] 		
[DEBUG] 	Compiled program:
[DEBUG] 		lfi_prob(2,t)::c(3).
[DEBUG] 		lfi_prob(1,t)::b(2).
[DEBUG] 		lfi_prob(0,t)::a(1).
[DEBUG] 		lfi_fact(2,3).
[DEBUG] 		query(lfi_fact(2,3)).
[DEBUG] 		lfi_fact(1,2).
[DEBUG] 		query(lfi_fact(1,2)).
[DEBUG] 		lfi_fact(0,1).
[DEBUG] 		query(lfi_fact(0,1)).
[DEBUG] 		lfi_body(2,3).
[DEBUG] 		query(lfi_body(2,3)).
[DEBUG] 		lfi_par(2,3).
[DEBUG] 		query(lfi_par(2,3)).
[DEBUG] 		lfi_body(1,2).
[DEBUG] 		query(lfi_body(1,2)).
[DEBUG] 		lfi_par(1,2).
[DEBUG] 		query(lfi_par(1,2)).
[DEBUG] 		lfi_body(0,1).
[DEBUG] 		query(lfi_body(0,1)).
[DEBUG] 		lfi_par(0,1).
[DEBUG] 		query(lfi_par(0,1)).
[DEBUG] 		evidence(c(3)).
[DEBUG] 		evidence(b(2)).
[DEBUG] 		evidence(a(1)).
[DEBUG] 
[DEBUG] Compiling example 2/4
[DEBUG] 	Grounded Atoms:	(a(1), b(2), c(3), c(2), a(2))
[DEBUG] 	Evidence:	[(a(1), True), (b(2), False), (c(3), True), (c(2), False), (a(2), True)]
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		4: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		5: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		Evidence : 
[DEBUG] 		* a(1) : 1
[DEBUG] 		* c(3) : 3
[DEBUG] 		* a(2) : 6
[DEBUG] 		* b(2) : -2
[DEBUG] 		* c(2) : -4
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([2, 4, 6], 5)
[DEBUG] 		
[DEBUG] 	Node 1:	Adding query for fact:	lfi_fact(0,1)
[DEBUG] 	Node 1:	Adding query for body:	lfi_body(0,1)	
[DEBUG] 	Node 1:	Adding query for par :	lfi_par(0,1)	
[DEBUG] 	Node 2:	Adding query for fact:	lfi_fact(1,2)
[DEBUG] 	Node 2:	Adding query for body:	lfi_body(1,2)	
[DEBUG] 	Node 2:	Adding query for par :	lfi_par(1,2)	
[DEBUG] 	Node 3:	Adding query for fact:	lfi_fact(2,3)
[DEBUG] 	Node 3:	Adding query for body:	lfi_body(2,3)	
[DEBUG] 	Node 3:	Adding query for par :	lfi_par(2,3)	
[DEBUG] 	Node 4:	Adding query for fact:	lfi_fact(2,2)
[DEBUG] 	Node 4:	Adding query for body:	lfi_body(2,2)	
[DEBUG] 	Node 4:	Adding query for par :	lfi_par(2,2)	
[DEBUG] 	Node 6:	Adding query for fact:	lfi_fact(0,2)
[DEBUG] 	Node 6:	Adding query for body:	lfi_body(0,2)	
[DEBUG] 	Node 6:	Adding query for par :	lfi_par(0,2)	
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		4: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		5: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(0,1) : 1 [query]
[DEBUG] 		* lfi_fact(1,2) : 2 [query]
[DEBUG] 		* lfi_fact(2,3) : 3 [query]
[DEBUG] 		* lfi_fact(2,2) : 4 [query]
[DEBUG] 		* lfi_fact(0,2) : 6 [query]
[DEBUG] 		* lfi_body(0,1) : 0 [query]
[DEBUG] 		* lfi_par(0,1) : 0 [query]
[DEBUG] 		* lfi_body(1,2) : None [query]
[DEBUG] 		* lfi_par(1,2) : 0 [query]
[DEBUG] 		* lfi_body(2,3) : 0 [query]
[DEBUG] 		* lfi_par(2,3) : 0 [query]
[DEBUG] 		* lfi_body(2,2) : None [query]
[DEBUG] 		* lfi_par(2,2) : 0 [query]
[DEBUG] 		* lfi_body(0,2) : 0 [query]
[DEBUG] 		* lfi_par(0,2) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* a(1) : 1
[DEBUG] 		* c(3) : 3
[DEBUG] 		* a(2) : 6
[DEBUG] 		* b(2) : -2
[DEBUG] 		* c(2) : -4
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([2, 4, 6], 5)
[DEBUG] 		
[DEBUG] 	Compiled program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		3: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		4: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		5: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(0,1) : 0 [query]
[DEBUG] 		* lfi_fact(1,2) : None [query]
[DEBUG] 		* lfi_fact(2,3) : 0 [query]
[DEBUG] 		* lfi_fact(2,2) : None [query]
[DEBUG] 		* lfi_fact(0,2) : 0 [query]
[DEBUG] 		* lfi_body(0,1) : 0 [query]
[DEBUG] 		* lfi_par(0,1) : 0 [query]
[DEBUG] 		* lfi_body(1,2) : None [query]
[DEBUG] 		* lfi_par(1,2) : 0 [query]
[DEBUG] 		* lfi_body(2,3) : 0 [query]
[DEBUG] 		* lfi_par(2,3) : 0 [query]
[DEBUG] 		* lfi_body(2,2) : None [query]
[DEBUG] 		* lfi_par(2,2) : 0 [query]
[DEBUG] 		* lfi_body(0,2) : 0 [query]
[DEBUG] 		* lfi_par(0,2) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* a(1) : 1
[DEBUG] 		* c(3) : 2
[DEBUG] 		* a(2) : 3
[DEBUG] 		* b(2) : -4
[DEBUG] 		* c(2) : -6
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([3, 4, 6], 5)
[DEBUG] 		
[DEBUG] 
[DEBUG] Compiling example 3/4
[DEBUG] 	Grounded Atoms:	(b(1), b(2), c(1), c(3), c(2), a(2), a(1))
[DEBUG] 	Evidence:	[(b(1), False), (b(2), False), (c(1), True), (c(3), True), (c(2), False), (a(2), True), (a(1), False)]
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 1), probability=lfi_prob(1,t), group=(0, (1, 1, 1) {{}}), name=b(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (1, 1, 1) {{}}, 2), probability=lfi_prob(2,t), group=(0, (1, 1, 1) {{}}), name=c(1), source=None)
[DEBUG] 		4: atom(identifier='(0, (1, 1, 1) {{}})_extra', probability=True, group=(0, (1, 1, 1) {{}}), name=choice(0,e,null,1,1,1), source=None)
[DEBUG] 		5: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		7: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		8: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		9: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		Evidence : 
[DEBUG] 		* c(1) : 3
[DEBUG] 		* c(3) : 5
[DEBUG] 		* a(2) : 8
[DEBUG] 		* b(1) : -1
[DEBUG] 		* b(2) : -2
[DEBUG] 		* c(2) : -6
[DEBUG] 		* a(1) : -9
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([1, 3, 9], 4)
[DEBUG] 		* annotated_disjunction([8, 2, 6], 7)
[DEBUG] 		
[DEBUG] 	Node 1:	Adding query for fact:	lfi_fact(1,1)
[DEBUG] 	Node 1:	Adding query for body:	lfi_body(1,1)	
[DEBUG] 	Node 1:	Adding query for par :	lfi_par(1,1)	
[DEBUG] 	Node 2:	Adding query for fact:	lfi_fact(1,2)
[DEBUG] 	Node 2:	Adding query for body:	lfi_body(1,2)	
[DEBUG] 	Node 2:	Adding query for par :	lfi_par(1,2)	
[DEBUG] 	Node 3:	Adding query for fact:	lfi_fact(2,1)
[DEBUG] 	Node 3:	Adding query for body:	lfi_body(2,1)	
[DEBUG] 	Node 3:	Adding query for par :	lfi_par(2,1)	
[DEBUG] 	Node 5:	Adding query for fact:	lfi_fact(2,3)
[DEBUG] 	Node 5:	Adding query for body:	lfi_body(2,3)	
[DEBUG] 	Node 5:	Adding query for par :	lfi_par(2,3)	
[DEBUG] 	Node 6:	Adding query for fact:	lfi_fact(2,2)
[DEBUG] 	Node 6:	Adding query for body:	lfi_body(2,2)	
[DEBUG] 	Node 6:	Adding query for par :	lfi_par(2,2)	
[DEBUG] 	Node 8:	Adding query for fact:	lfi_fact(0,2)
[DEBUG] 	Node 8:	Adding query for body:	lfi_body(0,2)	
[DEBUG] 	Node 8:	Adding query for par :	lfi_par(0,2)	
[DEBUG] 	Node 9:	Adding query for fact:	lfi_fact(0,1)
[DEBUG] 	Node 9:	Adding query for body:	lfi_body(0,1)	
[DEBUG] 	Node 9:	Adding query for par :	lfi_par(0,1)	
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 1), probability=lfi_prob(1,t), group=(0, (1, 1, 1) {{}}), name=b(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		3: atom(identifier=(0, (1, 1, 1) {{}}, 2), probability=lfi_prob(2,t), group=(0, (1, 1, 1) {{}}), name=c(1), source=None)
[DEBUG] 		4: atom(identifier='(0, (1, 1, 1) {{}})_extra', probability=True, group=(0, (1, 1, 1) {{}}), name=choice(0,e,null,1,1,1), source=None)
[DEBUG] 		5: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		7: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		8: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		9: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(1,1) : 1 [query]
[DEBUG] 		* lfi_fact(1,2) : 2 [query]
[DEBUG] 		* lfi_fact(2,1) : 3 [query]
[DEBUG] 		* lfi_fact(2,3) : 5 [query]
[DEBUG] 		* lfi_fact(2,2) : 6 [query]
[DEBUG] 		* lfi_fact(0,2) : 8 [query]
[DEBUG] 		* lfi_fact(0,1) : 9 [query]
[DEBUG] 		* lfi_body(1,1) : None [query]
[DEBUG] 		* lfi_par(1,1) : 0 [query]
[DEBUG] 		* lfi_body(1,2) : None [query]
[DEBUG] 		* lfi_par(1,2) : 0 [query]
[DEBUG] 		* lfi_body(2,1) : 0 [query]
[DEBUG] 		* lfi_par(2,1) : 0 [query]
[DEBUG] 		* lfi_body(2,3) : 0 [query]
[DEBUG] 		* lfi_par(2,3) : 0 [query]
[DEBUG] 		* lfi_body(2,2) : None [query]
[DEBUG] 		* lfi_par(2,2) : 0 [query]
[DEBUG] 		* lfi_body(0,2) : 0 [query]
[DEBUG] 		* lfi_par(0,2) : 0 [query]
[DEBUG] 		* lfi_body(0,1) : None [query]
[DEBUG] 		* lfi_par(0,1) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* c(1) : 3
[DEBUG] 		* c(3) : 5
[DEBUG] 		* a(2) : 8
[DEBUG] 		* b(1) : -1
[DEBUG] 		* b(2) : -2
[DEBUG] 		* c(2) : -6
[DEBUG] 		* a(1) : -9
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([1, 3, 9], 4)
[DEBUG] 		* annotated_disjunction([8, 2, 6], 7)
[DEBUG] 		
[DEBUG] 	Compiled program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 2), probability=lfi_prob(2,t), group=(0, (1, 1, 1) {{}}), name=c(1), source=None)
[DEBUG] 		2: atom(identifier=(0, (3, 3, 3) {{}}, 2), probability=lfi_prob(2,t), group=(0, (3, 3, 3) {{}}), name=c(3), source=None)
[DEBUG] 		3: atom(identifier=(0, (2, 2, 2) {{}}, 0), probability=lfi_prob(0,t), group=(0, (2, 2, 2) {{}}), name=a(2), source=None)
[DEBUG] 		4: atom(identifier=(0, (1, 1, 1) {{}}, 1), probability=lfi_prob(1,t), group=(0, (1, 1, 1) {{}}), name=b(1), source=None)
[DEBUG] 		5: atom(identifier='(0, (1, 1, 1) {{}})_extra', probability=True, group=(0, (1, 1, 1) {{}}), name=choice(0,e,null,1,1,1), source=None)
[DEBUG] 		6: atom(identifier=(0, (2, 2, 2) {{}}, 1), probability=lfi_prob(1,t), group=(0, (2, 2, 2) {{}}), name=b(2), source=None)
[DEBUG] 		7: atom(identifier='(0, (2, 2, 2) {{}})_extra', probability=True, group=(0, (2, 2, 2) {{}}), name=choice(0,e,null,2,2,2), source=None)
[DEBUG] 		8: atom(identifier=(0, (2, 2, 2) {{}}, 2), probability=lfi_prob(2,t), group=(0, (2, 2, 2) {{}}), name=c(2), source=None)
[DEBUG] 		9: atom(identifier=(0, (1, 1, 1) {{}}, 0), probability=lfi_prob(0,t), group=(0, (1, 1, 1) {{}}), name=a(1), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(1,1) : None [query]
[DEBUG] 		* lfi_fact(1,2) : None [query]
[DEBUG] 		* lfi_fact(2,1) : 0 [query]
[DEBUG] 		* lfi_fact(2,3) : 0 [query]
[DEBUG] 		* lfi_fact(2,2) : None [query]
[DEBUG] 		* lfi_fact(0,2) : 0 [query]
[DEBUG] 		* lfi_fact(0,1) : None [query]
[DEBUG] 		* lfi_body(1,1) : None [query]
[DEBUG] 		* lfi_par(1,1) : 0 [query]
[DEBUG] 		* lfi_body(1,2) : None [query]
[DEBUG] 		* lfi_par(1,2) : 0 [query]
[DEBUG] 		* lfi_body(2,1) : 0 [query]
[DEBUG] 		* lfi_par(2,1) : 0 [query]
[DEBUG] 		* lfi_body(2,3) : 0 [query]
[DEBUG] 		* lfi_par(2,3) : 0 [query]
[DEBUG] 		* lfi_body(2,2) : None [query]
[DEBUG] 		* lfi_par(2,2) : 0 [query]
[DEBUG] 		* lfi_body(0,2) : 0 [query]
[DEBUG] 		* lfi_par(0,2) : 0 [query]
[DEBUG] 		* lfi_body(0,1) : None [query]
[DEBUG] 		* lfi_par(0,1) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* c(1) : 1
[DEBUG] 		* c(3) : 2
[DEBUG] 		* a(2) : 3
[DEBUG] 		* b(1) : -4
[DEBUG] 		* b(2) : -6
[DEBUG] 		* c(2) : -8
[DEBUG] 		* a(1) : -9
[DEBUG] 		Constraints : 
[DEBUG] 		* annotated_disjunction([1, 4, 9], 5)
[DEBUG] 		* annotated_disjunction([8, 3, 6], 7)
[DEBUG] 		
[DEBUG] 
[DEBUG] Compiling example 4/4
[DEBUG] 	Grounded Atoms:	(b(1),)
[DEBUG] 	Evidence:	[(b(1), True)]
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 1), probability=lfi_prob(1,t), group=(0, (1, 1, 1) {{}}), name=b(1), source=None)
[DEBUG] 		Evidence : 
[DEBUG] 		* b(1) : 1
[DEBUG] 		
[DEBUG] 	Node 1:	Adding query for fact:	lfi_fact(1,1)
[DEBUG] 	Node 1:	Adding query for body:	lfi_body(1,1)	
[DEBUG] 	Node 1:	Adding query for par :	lfi_par(1,1)	
[DEBUG] 	New ground_program:
[DEBUG] 		1: atom(identifier=(0, (1, 1, 1) {{}}, 1), probability=lfi_prob(1,t), group=(0, (1, 1, 1) {{}}), name=b(1), source=None)
[DEBUG] 		Queries : 
[DEBUG] 		* lfi_fact(1,1) : 1 [query]
[DEBUG] 		* lfi_body(1,1) : 0 [query]
[DEBUG] 		* lfi_par(1,1) : 0 [query]
[DEBUG] 		Evidence : 
[DEBUG] 		* b(1) : 1
[DEBUG] 		
[DEBUG] 	Compiled program:
[DEBUG] 		lfi_prob(1,t)::b(1).
[DEBUG] 		lfi_fact(1,1).
[DEBUG] 		query(lfi_fact(1,1)).
[DEBUG] 		lfi_body(1,1).
[DEBUG] 		query(lfi_body(1,1)).
[DEBUG] 		lfi_par(1,1).
[DEBUG] 		query(lfi_par(1,1)).
[DEBUG] 		evidence(b(1)).
[INFO] Weights to learn: [t(_)::a(X), t(_)::b(Y), t(_)::c(Z)]
[INFO] Bodies: [lfi_body(0,X), lfi_body(1,Y), lfi_body(2,Z)]
[INFO] Parents: [lfi_par(0,X), lfi_par(1,Y), lfi_par(2,Z)]
[INFO] Initial weights: [0.4072020130946707, 0.23801561207352936, 0.2509506952321274]
[INFO] 
[INFO] Iteration 1
[DEBUG] Evaluating examples:
[DEBUG] Example 1:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(1,2): 1.0, lfi_par(1,2): 1.0, lfi_body(0,1): 1.0, lfi_par(0,1): 1.0}
[DEBUG] Example 2:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(0,1): 1.0, lfi_par(0,1): 1.0, lfi_body(1,2): 0.0, lfi_par(1,2): 1.0, lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(2,2): 0.0, lfi_par(2,2): 1.0, lfi_body(0,2): 1.0, lfi_par(0,2): 1.0}
[DEBUG] Example 3:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(1,1): 0.0, lfi_par(1,1): 1.0, lfi_body(1,2): 0.0, lfi_par(1,2): 1.0, lfi_body(2,1): 1.0, lfi_par(2,1): 1.0, lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(2,2): 0.0, lfi_par(2,2): 1.0, lfi_body(0,2): 1.0, lfi_par(0,2): 1.0, lfi_body(0,1): 0.0, lfi_par(0,1): 1.0}
[DEBUG] Example 4:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(1,1): 1.0, lfi_par(1,1): 1.0}
[DEBUG] Update probabilistic fact (2, 3): 3.0 / 10.0 = 0.3
[DEBUG] Update probabilistic fact (1, 2): 1.0 / 10.0 = 0.1
[DEBUG] Update probabilistic fact (0, 1): 2.0 / 10.0 = 0.2
[DEBUG] Update probabilistic fact (2, 2): 0.0 / 10.0 = 0.0
[DEBUG] Update probabilistic fact (0, 2): 2.0 / 10.0 = 0.2
[DEBUG] Update probabilistic fact (1, 1): 1.0 / 10.0 = 0.1
[DEBUG] Update probabilistic fact (2, 1): 1.0 / 10.0 = 0.1
[INFO] Weights after iteration 1: [{t: 0.4}, {t: 0.2}, {t: 0.4}]
[INFO] Score after iteration 1: 0.0
[INFO] 
[INFO] Iteration 2
[DEBUG] Evaluating examples:
[DEBUG] Example 1:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(1,2): 1.0, lfi_par(1,2): 1.0, lfi_body(0,1): 1.0, lfi_par(0,1): 1.0}
[DEBUG] Example 2:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(0,1): 1.0, lfi_par(0,1): 1.0, lfi_body(1,2): 0.0, lfi_par(1,2): 1.0, lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(2,2): 0.0, lfi_par(2,2): 1.0, lfi_body(0,2): 1.0, lfi_par(0,2): 1.0}
[DEBUG] Example 3:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(1,1): 0.0, lfi_par(1,1): 1.0, lfi_body(1,2): 0.0, lfi_par(1,2): 1.0, lfi_body(2,1): 1.0, lfi_par(2,1): 1.0, lfi_body(2,3): 1.0, lfi_par(2,3): 1.0, lfi_body(2,2): 0.0, lfi_par(2,2): 1.0, lfi_body(0,2): 1.0, lfi_par(0,2): 1.0, lfi_body(0,1): 0.0, lfi_par(0,1): 1.0}
[DEBUG] Example 4:	Frequency = 1	p_evidence = 1.0	p_queries = {lfi_body(1,1): 1.0, lfi_par(1,1): 1.0}
[DEBUG] Update probabilistic fact (2, 3): 3.0 / 10.0 = 0.3
[DEBUG] Update probabilistic fact (1, 2): 1.0 / 10.0 = 0.1
[DEBUG] Update probabilistic fact (0, 1): 2.0 / 10.0 = 0.2
[DEBUG] Update probabilistic fact (2, 2): 0.0 / 10.0 = 0.0
[DEBUG] Update probabilistic fact (0, 2): 2.0 / 10.0 = 0.2
[DEBUG] Update probabilistic fact (1, 1): 1.0 / 10.0 = 0.1
[DEBUG] Update probabilistic fact (2, 1): 1.0 / 10.0 = 0.1
[INFO] Weights after iteration 2: [{t: 0.4}, {t: 0.2}, {t: 0.4}]
[INFO] Score after iteration 2: 0.0
[INFO] 
[INFO] Learned Model:	
[INFO] 0.4::a(X); 0.2::b(Y); 0.4::c(Z) :- X=Y, Y=Z.
[INFO] 
